#include "matrix.h"

const uint8_t quantity_of_matrix = 3;
const uint8_t size_of_alphabet = 68;

LedControl initializeDisplay()
{
  LedControl lc(6,5,10,3);
  //LedControl lc(12,11,10,3);
  lc.shutdown(0,false);
  lc.setIntensity(0,1);
  lc.clearDisplay(0);
  lc.shutdown(1,false);
  lc.setIntensity(1,1);
  lc.clearDisplay(1);
  lc.shutdown(2,false);
  lc.setIntensity(2,1);
  lc.clearDisplay(2);
  //lc.shutdown(3,false);
  //lc.setIntensity(3,8);
  //lc.clearDisplay(3);
  return lc;
}

void DisplayPicture(LedControl lc, char* data, char quantity_of_matrix)
{
  for (uint8_t j = 0; j < quantity_of_matrix; j++)
  {
    char address_of_matrix = data[j*9]; 
    char* matrix = data+j*9+1;
    DisplayMatrix(lc, address_of_matrix, matrix);
  }
}

void DisplayMatrix(LedControl lc, char address_of_matrix, char* matrix)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    lc.setRow(address_of_matrix, i, (uint8_t)matrix[i]);
  }
}

void ClearDisplay(LedControl lc)
{
  lc.clearDisplay(0);
  lc.clearDisplay(1);
  lc.clearDisplay(2);
 // lc.clearDisplay(3);
}


char alpha[size_of_alphabet] = {'\0', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','!','#','$','%','&','(',')','*','+',',','-','.','/',':',';','<','=','>','?','@','[',']','^','_','`','{','|','}','~','"'};

uint8_t alphabet[8*size_of_alphabet] = {
  //\0
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  //' '
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  //1
  B00001000,
  B00011000,
  B00101000,
  B01001000,
  B00001000,
  B00001000,
  B00001000,
  B00011100,
  //2
  B00111100,
  B01000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B11111110,
  //3
  B00111100,
  B01000010,
  B00000010,
  B00011100,
  B00000010,
  B00000010,
  B10000010,
  B01111100,
  //4
  B00000100,
  B00001100,
  B00010100,
  B00100100,
  B01000100,
  B11111110,
  B00000100,
  B00000100,
  //5
  B11111110,
  B10000000,
  B10000000,
  B11111100,
  B00000010,
  B00000010,
  B00000010,
  B11111100,
  //6
  B01111100,
  B10000010,
  B10000000,
  B11111100,
  B10000010,
  B10000010,
  B10000010,
  B01111100,
  //7
  B11111110,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  //8
  B01111100,
  B10000010,
  B10000010,
  B01111100,
  B10000010,
  B10000010,
  B10000010,
  B01111100,
  //9
  B01111100,
  B10000010,
  B10000010,
  B10000010,
  B01111110,
  B00000010,
  B10000010,
  B01111100,
  //0
  B00111000,
  B01000100,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B01000100,
  B00111000,
  //A
  B00111000,
  B01000100,
  B10000010,
  B10000010,
  B11111110,
  B10000010,
  B10000010,
  B10000010,
  //B
  B11111100,
  B10000010,
  B10000010,
  B11111100,
  B10000010,
  B10000010,
  B10000010,
  B11111100,
//C
  B00111110,
  B01000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B01000000,
  B00111110,
//D
  B11111100,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B11111100,
//E
  B11111110,
  B10000000,
  B10000000,
  B11111110,
  B10000000,
  B10000000,
  B10000000,
  B11111110,
//F
  B11111110,
  B10000000,
  B10000000,
  B11111000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
//G
  B00111110,
  B01000000,
  B10000000,
  B10000000,
  B10001110,
  B10000010,
  B01000010,
  B00111100,
//H
  B10000010,
  B10000010,
  B10000010,
  B11111110,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  //I
  B01111100,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B01111100,
  //J
  B01111110,
  B00000010,
  B00000010,
  B00000010,
  B00000010,
  B00000010,
  B01000100,
  B00111000,
  //K
  B10001100,
  B10010000,
  B10100000,
  B11000000,
  B10100000,
  B10010000,
  B10001000,
  B10000110,
  //L
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000010,
  B11111110,
  //M
  B10000010,
  B11000110,
  B10101010,
  B10010010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  //N
  B10000010,
  B11000010,
  B10100010,
  B10010010,
  B10010010,
  B10001010,
  B10000110,
  B10000010,
  //O
  B00111000,
  B01000100,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B01000100,
  B00111000,
  //P
  B11111100,
  B10000010,
  B10000010,
  B10000010,
  B11111100,
  B10000000,
  B10000000,
  B10000000,
  //Q
  B00111000,
  B01000100,
  B10000010,
  B10000010,
  B10000010,
  B01000100,
  B00111000,
  B00011110,
  //R
  B11111100,
  B10000010,
  B10000010,
  B10000010,
  B11111100,
  B10001000,
  B10000100,
  B10000010,
  //S
  B01111110,
  B10000000,
  B10000000,
  B01111100,
  B00000010,
  B00000010,
  B00000010,
  B11111100,
  //T
  B11111110,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  //U
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B01111100,
  //V
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B01000100,
  B00101000,
  B00010000,
  //W
  B10000010,
  B10000010,
  B10000010,
  B10000010,
  B10010010,
  B10010010,
  B01010100,
  B00101000,
  //X
  B10000010,
  B01000100,
  B00101000,
  B00010000,
  B00010000,
  B00101000,
  B01000100,
  B10000010,
  //Y
  B10000010,
  B01000100,
  B00101000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00111000,
  //Z
  B11111110,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B11111110,
  //!
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00000000,
  B00010000,
  //#
  B01000100,
  B01000100,
  B11111110,
  B01000100,
  B01000100,
  B11111110,
  B01000100,
  B01000100,
  //$
  B00010000,
  B01111110,
  B10010000,
  B10010000,
  B01111100,
  B00010010,
  B11111100,
  B00010000,
  //%
  B01000010,
  B10100100,
  B01001000,
  B00010000,
  B00010000,
  B00100100,
  B01001010,
  B10000100,
  //&
  B00110000,
  B01001000,
  B00110000,
  B01010000,
  B10001010,
  B10001010,
  B10000100,
  B01111010,
  //(
  B00010000,
  B00100000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B00100000,
  B00010000,
  //)
  B00010000,
  B00001000,
  B00000100,
  B00000100,
  B00000100,
  B00000100,
  B00001000,
  B00010000,
  //*
  B00010000,
  B00010000,
  B00010000,
  B11111110,
  B00101000,
  B01000100,
  B10000010,
  B00000000,
  //+
  B00000000,
  B00010000,
  B00010000,
  B11111110,
  B00010000,
  B00010000,
  B00000000,
  B00000000,
  //,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00010000,
  B00010000,
  B00100000,
  //-
  B00000000,
  B00000000,
  B00000000,
  B11111110,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  //.
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00011000,
  B00011000,
  ///
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  //:
  B00011000,
  B00011000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00011000,
  B00011000,
  //;
  B00011000,
  B00011000,
  B00000000,
  B00000000,
  B00000000,
  B00001000,
  B00001000,
  B00010000,
  //<
  B00000000,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B00010000,
  B00001000,
  B00000100,
  //=
  B00000000,
  B00000000,
  B11111110,
  B00000000,
  B11111110,
  B00000000,
  B00000000,
  B00000000,
  //>
  B00000000,
  B00100000,
  B00010000,
  B00001000,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  //?
  B00011100,
  B00100010,
  B00100010,
  B00000100,
  B00001000,
  B00001000,
  B00000000,
  B00001000,
  //@
  B01111100,
  B10000010,
  B10011110,
  B10100010,
  B10100010,
  B10011100,
  B01000010,
  B00111100,  
  //[
  B00111100,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00111100,
  //]
  B00111100,
  B00000100,
  B00000100,
  B00000100,
  B00000100,
  B00000100,
  B00000100,
  B00111100,
  //^
  B00010000,
  B00101000,
  B01000100,
  B10000010,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  //_
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B01111110,
  //`
  B10000000,
  B01000000,
  B00100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  //{
  B00111100,
  B00100000,
  B00100000,
  B01100000,
  B00100000,
  B00100000,
  B00100000,
  B00111100,
  //|
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  //}
  B00111100,
  B00000100,
  B00000100,
  B00000110,
  B00000100,
  B00000100,
  B00000100,
  B00111100,
  //~
  B00000000,
  B00000000,
  B00000000,
  B01100000,
  B10010010,
  B00001100,
  B00000000,
  B00000000,
  //"
  B01100110,
  B11001100,
  B11001100,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
};

void DisplayText(LedControl lc, char* text, uint8_t size_of_data)
{  
  size_of_data += 2 * quantity_of_matrix; // add some zeros so they can display as nothing
  char data[size_of_data];
  for (short i = 0; i < quantity_of_matrix; i++) {
    data[i] = 0;
  }
  for (short i = quantity_of_matrix; i < size_of_data - quantity_of_matrix; i++) {
    data[i] = text[i - quantity_of_matrix];
  }
  for (short i = size_of_data - quantity_of_matrix; i < size_of_data; i++) {
    data[i] = 0;
  }
  char* first_matrix_ptr = data;
  while(first_matrix_ptr < data + size_of_data + 1) {
    for (uint8_t i = 0; i < quantity_of_matrix; i++) {
      for (uint8_t h = 0; h < size_of_alphabet; h++)
      {
        if (first_matrix_ptr[i] == alpha[h]) // if our alphabet contains first_matrix_ptr[i] character
        {
          DisplayAlpha(lc, i, h);
          break;
        }
      }
    }
    delay(500); // delay to create effect of running string
    first_matrix_ptr++; // allows next characters to display on matrixes
  }  
}

void DisplayAlpha(LedControl lc, uint8_t i, uint8_t h)
{
  uint8_t k = 0;
  for (uint8_t j = 0; j < 8; j++)
  {
    lc.setRow(i,k,alphabet[j+8*h]);
    k++;
  }
}

